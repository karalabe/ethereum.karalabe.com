Breaking Ethereum 😈
Lessons learnt from broken contracts
10 Sep 2016

Péter Szilágyi
peter@ethereum.org
@peter_szilagyi

Ethereum Core Developer
https://ethereum.org/

* If you don't know the chain dynamics...

* Ether faucet – 0x793ae8c1b1a160bfc07bfb0d04f85eab1a71f4f2

.image pwn/whitespace.png
.code pwn/faucet.sol
.html pwn/faucet_embed.html

Give away 0.01 Ether to anyone, once per 24 hours... what could go wrong? 😇

* Ether faucet – pwned 🙃

.image pwn/whitespace.png
.html pwn/faucet_pwned_embed.html

Payout (0.01 Ether) is a nice amount

- 4.1x withdrawals (48748 gas * 50 gwei)
- 9.5x transactions (21000 gas * 50 gwei)

.image pwn/whitespace.png

Faucet security ⇔ Account uniqueness

- 24h restriction applies per account
- No global withdrawal throttling

.html pwn/faucet_lesson_embed.html

* Roulette – 0x5fe5b7546d1628f7348b023a0393de1fc825a4fd

.image pwn/whitespace.png

Sizeable [[https://github.com/retotrinkler/solidity1/blob/master/alpha/roulette.sol][implementation]] of a roulette game

- Users bet on various outcomes of a "spin"
- After each bet the contract spins the wheel

.html pwn/roulette_embed.html
.code pwn/roulette.sol

Uses an onchain random number generator... what could go wrong? 😇

* Roulette – pwned 🙃

.image pwn/whitespace.png
.html pwn/roulette_pwned_embed.html

Miners make the chain

- Block parameters are defined by miners
- Included transactions are chosen by miners

.image pwn/whitespace.png

Transactions are aware of the chain

- Block parameters are shared between them
- Contracts decide runtime how to invoke others

.html pwn/roulette_lesson_embed.html

* Etherdice – 0x2faa316fc4624ec39adc2ef7b5301124cfb68777

.image pwn/whitespace.png
Fairly [[https://etherdice.io/#contract][involved]] dice game

- Owner seeds round with hidden number
- Players bet on outcomes with own numbers
- Owner reveals the number, evaluating the round

.code pwn/dice.sol
.html pwn/dice_embed.html

Iterate over all accumulated bets in one go... what could go wrong? 😇

* Etherdice – self pwned 🙃

.image pwn/whitespace.png

Blocks have limited gas allowances

- Limits the transactions in a block
- Limits the gas of a single transaction

.image pwn/whitespace.png

Etherdice iterated all bets when closing a round

- Gas usage increased linearly with popularity 😕
- Reaching critical mass, the contract locked up 🙃

.html pwn/dice_pwned_embed.html
.html pwn/dice_lesson_embed.html

* If you don't know the language dynamics...

* GovernMental – 0xf45717552f12ef7cb65e95476f217ea008167ae3

.image pwn/whitespace.png

[[https://github.com/GovernMental/GovernMental][Twisted]] Ponzi scheme with smart contracts

- Newcomers invest money to become members
- Members earn returns from newcomer investments

.code pwn/ponzi.sol
.html pwn/ponzi_embed.html

Casually reset the contract at round end... what could go wrong? 😇

* GovernMental – self pwned 🙃

.image pwn/whitespace.png

Contract storage in EVM is a single hash map

- All contract fields map into the same storage area
- Array elements map into the same storage space too

.image pwn/whitespace.png

Freeing up a field ⇔ zeroing out a storage entry

- Freeing up an array ⇔ freeing *all* associated entries

.html pwn/ponzi_pwned_embed.html
.html pwn/ponzi_lesson_embed.html

* King of the Ether – 0xb336a86e2feb1e87a328fcb7dd4d04de3df254d0

.image pwn/whitespace.png

Game of Thrones pyramid [[https://github.com/kieranelby/KingOfTheEtherThrone/tree/v0.4.0/contracts][contract]]

- Usurpers pay the ether-price for the throne
- The ruler is paid and mysteriously disappears

.code pwn/throne.sol
.html pwn/throne_embed.html

Send blindly to compensate the previous ruler... what could go wrong? 😇

* King of the Ether – broken 🙃

.image pwn/whitespace.png

Sending funds is an external CALL operation

- Recipient execution limited to 2300 gas
- Returns whether the send succeeded

.image pwn/whitespace.png

But what if the ether transfer failed?

- Ignore it? Bail out? Work around?
- Not caring easily breaks invariants!

.html pwn/throne_pwned_embed.html
.html pwn/throne_lesson_embed.html

* If you don't know the EVM dyamics...

* MakerDAO – 0xe02640be68df835aa3327ea6473c02c8f6c3815a

.image pwn/whitespace.png

[[https://github.com/makerdao][Contracts]] and [[https://github.com/nexusdev][frameworks]] for an on-chain crypto exchange

- Users deposit and trade various tokens (and Ether)
- Users are free to withdraw coins at any point

.code pwn/maker.sol
.html pwn/maker_embed.html

Send funds with full gas allowance... what could go wrong? 😇

* MakerDAO – preventive pwned 🙃

.image pwn/whitespace.png

Calling another contract relinquishes execution

- Arbitrary code may execute (different context)
- Entire granted gas allowance may be consumed

.image pwn/whitespace.png

Recipient may have enough gas to call further

- Can update multiple related contracts (good)
- Can call back in to the original contract (hmmm)

.html pwn/maker_pwned_embed.html
.html pwn/maker_lesson_embed.html

* Pre-homestead multisig wallet

.image pwn/whitespace.png

Wallet [[https://github.com/ethereum/meteor-dapp-wallet/blob/e0980c6905006456945b8b465df71ea1bf2111b2/Wallet.sol][contract]] requiring multiple authorizations

- To save on deploy: _user_→_stub_(multi)_→_code_(single)_
- Context needs to be forwarded down the call chain

.code pwn/wallet.sol
.html pwn/wallet_embed.html

Simply use _tx.origin_ for authentication... what could go wrong? 😇

* Pre-homestead multisig wallet – swapped before pwn 🙃

.image pwn/whitespace.png

Pre-homestead, libraries used CALLCODE

- Forwards runtime context, except _msg.sender_
- Libraries relied on _tx.origin_ to authorize the transactor

.image pwn/whitespace.png

Internal transactions retain the same _tx.origin_

- *My* nested contracts can authorize me (good)
- *Not*my* nested contracts can reenter as me (oops)

.html pwn/wallet_pwned_embed.html
.html pwn/wallet_lesson_embed.html

* TheDAO – 0xbb9bc244d798123fde783fcc1c72d3bb8c189413

.html pwn/dao_embed.html

* Beer keg challenge 🍺

* Beer keg – 0x629469c8db3a4d7bcc3a823effcf8900119ba7e7

.image pwn/whitespace.png

[[http://etherscan.io/address/0x629469c8db3a4d7bcc3a823effcf8900119ba7e7#code][Untappable]] beer contract

- A round of beer inside (5 Ether)
- Crack it open? Have a round on me!

.code pwn/beer.sol
.html pwn/beer_embed.html

* Legacy of the fallen ones... ଘ(੭*ˊᵕˋ)੭

.image pwn/whitespace.png

- Accounts are free, instantaneous and infinite! (20 Ether)
- Blockchain state is free for all to use and abuse! (150 Ether)
- Operations above O(1) will exceed the gas limit! (5192 Ether)
- Understand and avoid magical constructs! (1100 Ether)
- Anything that can go wrong, will go wrong! (42 Ether)
- External calls will eventually loop back in! (5800 Ether)
- Authorization forwarding is exceptionally risky! (0 Ether)
- Never forget Mt. Gox! Never forget TheDAO! (3.6M Ether)
- Bonus: Compilers are written by mere mortals! (5 Ether)

.html pwn/lesson_embed.html
